1. Authentication and Authorization
    1.1 jwt rotatation

logout functionality from admin dashboard(as admin user),
1. admin user will call the admin/user-logout api.
2. in backend service logout api, remove the accces/refresh token from redis and return 204.
3. in frontend when user will call any api with access/refresh token then in middleware, check in redis that tokens should be available. need to research on this.  
4. in frontend redirect user to login page 

rotate token should be integrated in auth middleware R&D


if i have my own refresh token and other user have there token, 
i should not be able to update the refresh token of that user, check that.


Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwidXNlcl9pZCI6IjRiZjlkZjRmLTg5ZTMtNDM2ZC1hYjhhLThjMjM0MTJlYzYyNCIsImV4cCI6MTcxMTI0MjgyMH0.Dv5nzywu2DWdaHQMzKpUdPiCyFkyyGoKK0febGTEYAY


import axios from 'axios';

const api = axios.create({
  baseURL: 'https://your-api-url.com',
});

// Add a request interceptor
api.interceptors.request.use(
  async (config) => {
    // Check if token is present and not expired
    if (localStorage.getItem('token')) {
      // Add the token to the request headers
      config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Add a response interceptor
api.interceptors.response.use(
  (response) => {
    return response;
  },
  async function (error) {
    const originalRequest = error.config;

    // If token is expired or unauthorized
    if (error.response.status === 401) {
      // Attempt to refresh token or handle authentication flow
      try {
        const response = await axios.post('https://your-api-url.com/refresh-token', {
          token: localStorage.getItem('refreshToken'),
        });

        // If refresh successful, update token and retry original request
        localStorage.setItem('token', response.data.token);
        originalRequest.headers.Authorization = `Bearer ${response.data.token}`;
        return axios(originalRequest);
      } catch (error) {
        // Handle refresh token failure or other authentication errors
        console.error('Failed to refresh token:', error);
        // Perform logout or redirect to login page
      }
    }

    return Promise.reject(error);
  }
);

export default api;
