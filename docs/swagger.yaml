definitions:
  models.Client:
    properties:
      client_user_id:
        type: string
      company_domain:
        type: string
      company_name:
        type: string
      company_size:
        type: integer
      country:
        type: string
      id:
        type: string
    type: object
  types.ClientAddUser:
    properties:
      client_id:
        type: string
      created_by:
        $ref: '#/definitions/models.Client'
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      updated_by:
        $ref: '#/definitions/models.Client'
    type: object
  types.ClientCreateData:
    properties:
      company_name:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  types.CreateUserData:
    properties:
      client_id:
        type: string
      created_by:
        $ref: '#/definitions/models.Client'
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      updated_by:
        $ref: '#/definitions/models.Client'
    type: object
  types.ForgotPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        type: string
    required:
    - email
    - new_password
    type: object
  types.GetChatMessageRequestBody:
    properties:
      chat_room_id:
        type: string
      current_user_id:
        type: string
    type: object
  types.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  types.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  types.SendEmailRequest:
    properties:
      email:
        type: string
    type: object
  types.VerifyEmailRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    type: object
  utils.Metadata:
    properties:
      api_version:
        default: v1
        type: string
      server_info:
        $ref: '#/definitions/utils.ServerInfo'
    type: object
  utils.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      metadata:
        $ref: '#/definitions/utils.Metadata'
      request_id:
        type: string
      status:
        type: string
      status_code:
        type: integer
      time_stamp:
        type: string
    type: object
  utils.ServerInfo:
    properties:
      hostname:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/auth/forgot-password:
    post:
      description: Forgot password
      parameters:
      - description: forgot password request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad request
        "500":
          description: Internal server error
      summary: forgot-password
      tags:
      - Auth
  /v1/auth/login:
    post:
      description: Login user
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login user successfully
        "400":
          description: Bad request
        "500":
          description: Internal server error
      summary: login-user
      tags:
      - Auth
  /v1/auth/logout:
    post:
      description: User logout User
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
        "400":
          description: Bad request
        "500":
          description: Internal server error
      summary: user-logout
      tags:
      - Auth
  /v1/auth/register:
    post:
      description: Register User account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Register user successfully
        "400":
          description: Bad request
        "500":
          description: Internal server error
      summary: register-user
      tags:
      - Auth
  /v1/auth/send-email:
    post:
      description: Send email to user
      parameters:
      - description: send email request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.SendEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Bad request
        "500":
          description: Internal server error
      summary: send-email
      tags:
      - Auth
  /v1/auth/verify-email:
    post:
      description: Verify email otp.
      parameters:
      - description: verify email request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Bad request
        "500":
          description: Internal server error
      summary: verify-email
      tags:
      - Auth
  /v1/chat/messages:
    get:
      description: Register User account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.GetChatMessageRequestBody'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Register User account
      tags:
      - Chat-Message
  /v1/chat/messages/{room_id}:
    get:
      description: GetChatMessageByRoomId
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.GetChatMessageRequestBody'
      produces:
      - application/json
      responses: {}
      summary: GetChatMessageByRoomId
      tags:
      - Chat-Message
  /v1/chat/room/contact:
    get:
      description: UserLogin User account
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: UserLogin User account
      tags:
      - Chat-Room
  /v1/chat/room/groups:
    post:
      description: UserLogin User account
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: UserLogin User account
      tags:
      - Chat-Group
  /v1/chat/rooms:
    delete:
      description: DeleteChatRoom
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: DeleteChatRoom
      tags:
      - Chat-Room
    get:
      description: GetChatRooms
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: GetChatRooms
      tags:
      - Chat-Room
    post:
      description: CreateChatRoom
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: CreateChatRoom
      tags:
      - Chat-Room
  /v1/client/users:
    get:
      description: GetClientUsers account
      produces:
      - application/json
      responses: {}
      summary: GetClientUsers account
      tags:
      - Client-User
    post:
      description: ClientAddUser account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.ClientAddUser'
      produces:
      - application/json
      responses: {}
      summary: ClientAddUser account
      tags:
      - Client-User
  /v1/clients:
    get:
      description: GetAllClients User account
      parameters:
      - description: Client's company name
        in: query
        name: company_name
        type: string
      - description: GetAllClients login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.ClientCreateData'
      produces:
      - application/json
      responses: {}
      summary: GetAllClients User account
      tags:
      - Client
    post:
      description: UserLogin User account
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.ClientCreateData'
      produces:
      - application/json
      responses: {}
      summary: UserLogin User account
      tags:
      - Client
  /v1/clients/{id}:
    get:
      description: GetClientById User account
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: GetClientById User account
      tags:
      - Client
  /v1/user/check-email:
    get:
      parameters:
      - description: User create details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserData'
      produces:
      - application/json
      responses: {}
      summary: User create
      tags:
      - User
  /v1/users:
    get:
      parameters:
      - description: User create details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserData'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: get all users
      tags:
      - User
    post:
      parameters:
      - description: User create details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserData'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: User create
      tags:
      - User
    put:
      parameters:
      - description: User create details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserData'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: user-update
      tags:
      - User
  /v1/users/{id}:
    get:
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: get user by ID
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
